
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftREL_OPleftPLUSMINUSleftMULTIPLYDIVIDEASSIGN COLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END FLOAT IDENTIFIER IF INT LBRACE LBRACKET LPAREN MAIN MINUS MULTIPLY PLUS PRINT PROGRAM RBRACE RBRACKET REL_OP RPAREN SEMICOLON VAR VOID WHILEprogram : PROGRAM IDENTIFIER SEMICOLON vars_opt funcs_opt MAIN body ENDvars_opt : vars\n                | emptyfuncs_opt : funcs\n                 | emptyvars : VAR var_declaration_listvar_declaration_list : IDENTIFIER COLON type SEMICOLON var_declaration_list\n                            | IDENTIFIER COLON type SEMICOLONtype : INT\n            | FLOATfuncs : emptybody : LBRACE statement_list RBRACEstatement_list : statement statement_list\n                      | emptystatement : assign\n                 | print_stmt\n                 | if_stmtif_stmt : IF LPAREN expresion RPAREN bodyassign : IDENTIFIER ASSIGN expresion SEMICOLONprint_stmt : PRINT LPAREN expresion RPAREN SEMICOLONexpresion : exp REL_OP exp\n                 | expexp : exp PLUS termino\n           | exp MINUS termino\n           | terminotermino : termino MULTIPLY factor\n               | termino DIVIDE factor\n               | factorfactor : LPAREN expresion RPAREN\n              | PLUS constante\n              | MINUS constante\n              | constante\n              | IDENTIFIERconstante : CTE_INT\n                 | CTE_FLOAT\n                 | CTE_STRINGempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,21,],[0,-1,]),'IDENTIFIER':([2,8,17,23,25,26,27,31,32,34,35,36,45,52,53,54,55,57,58,69,70,],[3,13,28,28,-15,-16,-17,13,-12,38,38,38,38,-19,38,38,38,38,38,-20,-18,]),'SEMICOLON':([3,18,19,20,38,39,40,42,44,46,47,48,49,56,59,61,63,64,65,66,67,68,],[4,31,-9,-10,-33,52,-22,-25,-28,-32,-34,-35,-36,-30,-31,69,-21,-23,-24,-26,-27,-29,]),'VAR':([4,],[8,]),'MAIN':([4,5,6,7,9,10,11,12,31,37,],[-37,-37,-2,-3,14,-4,-5,-6,-8,-7,]),'COLON':([13,],[15,]),'LBRACE':([14,62,],[17,17,]),'INT':([15,],[19,]),'FLOAT':([15,],[20,]),'END':([16,32,],[21,-12,]),'RBRACE':([17,22,23,24,25,26,27,32,33,52,69,70,],[-37,32,-37,-14,-15,-16,-17,-12,-13,-19,-20,-18,]),'PRINT':([17,23,25,26,27,32,52,69,70,],[29,29,-15,-16,-17,-12,-19,-20,-18,]),'IF':([17,23,25,26,27,32,52,69,70,],[30,30,-15,-16,-17,-12,-19,-20,-18,]),'ASSIGN':([28,],[34,]),'LPAREN':([29,30,34,35,36,45,53,54,55,57,58,],[35,36,45,45,45,45,45,45,45,45,45,]),'PLUS':([34,35,36,38,40,42,44,45,46,47,48,49,53,54,55,56,57,58,59,63,64,65,66,67,68,],[41,41,41,-33,54,-25,-28,41,-32,-34,-35,-36,41,41,41,-30,41,41,-31,54,-23,-24,-26,-27,-29,]),'MINUS':([34,35,36,38,40,42,44,45,46,47,48,49,53,54,55,56,57,58,59,63,64,65,66,67,68,],[43,43,43,-33,55,-25,-28,43,-32,-34,-35,-36,43,43,43,-30,43,43,-31,55,-23,-24,-26,-27,-29,]),'CTE_INT':([34,35,36,41,43,45,53,54,55,57,58,],[47,47,47,47,47,47,47,47,47,47,47,]),'CTE_FLOAT':([34,35,36,41,43,45,53,54,55,57,58,],[48,48,48,48,48,48,48,48,48,48,48,]),'CTE_STRING':([34,35,36,41,43,45,53,54,55,57,58,],[49,49,49,49,49,49,49,49,49,49,49,]),'MULTIPLY':([38,42,44,46,47,48,49,56,59,64,65,66,67,68,],[-33,57,-28,-32,-34,-35,-36,-30,-31,57,57,-26,-27,-29,]),'DIVIDE':([38,42,44,46,47,48,49,56,59,64,65,66,67,68,],[-33,58,-28,-32,-34,-35,-36,-30,-31,58,58,-26,-27,-29,]),'REL_OP':([38,40,42,44,46,47,48,49,56,59,64,65,66,67,68,],[-33,53,-25,-28,-32,-34,-35,-36,-30,-31,-23,-24,-26,-27,-29,]),'RPAREN':([38,40,42,44,46,47,48,49,50,51,56,59,60,63,64,65,66,67,68,],[-33,-22,-25,-28,-32,-34,-35,-36,61,62,-30,-31,68,-21,-23,-24,-26,-27,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars_opt':([4,],[5,]),'vars':([4,],[6,]),'empty':([4,5,17,23,],[7,11,24,24,]),'funcs_opt':([5,],[9,]),'funcs':([5,],[10,]),'var_declaration_list':([8,31,],[12,37,]),'body':([14,62,],[16,70,]),'type':([15,],[18,]),'statement_list':([17,23,],[22,33,]),'statement':([17,23,],[23,23,]),'assign':([17,23,],[25,25,]),'print_stmt':([17,23,],[26,26,]),'if_stmt':([17,23,],[27,27,]),'expresion':([34,35,36,45,],[39,50,51,60,]),'exp':([34,35,36,45,53,],[40,40,40,40,63,]),'termino':([34,35,36,45,53,54,55,],[42,42,42,42,42,64,65,]),'factor':([34,35,36,45,53,54,55,57,58,],[44,44,44,44,44,44,44,66,67,]),'constante':([34,35,36,41,43,45,53,54,55,57,58,],[46,46,46,56,59,46,46,46,46,46,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER SEMICOLON vars_opt funcs_opt MAIN body END','program',8,'p_program','parser.py',17),
  ('vars_opt -> vars','vars_opt',1,'p_vars_opt','parser.py',23),
  ('vars_opt -> empty','vars_opt',1,'p_vars_opt','parser.py',24),
  ('funcs_opt -> funcs','funcs_opt',1,'p_funcs_opt','parser.py',28),
  ('funcs_opt -> empty','funcs_opt',1,'p_funcs_opt','parser.py',29),
  ('vars -> VAR var_declaration_list','vars',2,'p_vars','parser.py',34),
  ('var_declaration_list -> IDENTIFIER COLON type SEMICOLON var_declaration_list','var_declaration_list',5,'p_var_declaration_list','parser.py',38),
  ('var_declaration_list -> IDENTIFIER COLON type SEMICOLON','var_declaration_list',4,'p_var_declaration_list','parser.py',39),
  ('type -> INT','type',1,'p_type','parser.py',48),
  ('type -> FLOAT','type',1,'p_type','parser.py',49),
  ('funcs -> empty','funcs',1,'p_funcs','parser.py',54),
  ('body -> LBRACE statement_list RBRACE','body',3,'p_body','parser.py',59),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',64),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',65),
  ('statement -> assign','statement',1,'p_statement','parser.py',73),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',74),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',75),
  ('if_stmt -> IF LPAREN expresion RPAREN body','if_stmt',5,'p_if_stmt','parser.py',82),
  ('assign -> IDENTIFIER ASSIGN expresion SEMICOLON','assign',4,'p_assign','parser.py',87),
  ('print_stmt -> PRINT LPAREN expresion RPAREN SEMICOLON','print_stmt',5,'p_print_stmt','parser.py',92),
  ('expresion -> exp REL_OP exp','expresion',3,'p_expresion','parser.py',98),
  ('expresion -> exp','expresion',1,'p_expresion','parser.py',99),
  ('exp -> exp PLUS termino','exp',3,'p_exp','parser.py',106),
  ('exp -> exp MINUS termino','exp',3,'p_exp','parser.py',107),
  ('exp -> termino','exp',1,'p_exp','parser.py',108),
  ('termino -> termino MULTIPLY factor','termino',3,'p_termino','parser.py',115),
  ('termino -> termino DIVIDE factor','termino',3,'p_termino','parser.py',116),
  ('termino -> factor','termino',1,'p_termino','parser.py',117),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','parser.py',124),
  ('factor -> PLUS constante','factor',2,'p_factor','parser.py',125),
  ('factor -> MINUS constante','factor',2,'p_factor','parser.py',126),
  ('factor -> constante','factor',1,'p_factor','parser.py',127),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',128),
  ('constante -> CTE_INT','constante',1,'p_constante','parser.py',137),
  ('constante -> CTE_FLOAT','constante',1,'p_constante','parser.py',138),
  ('constante -> CTE_STRING','constante',1,'p_constante','parser.py',139),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',144),
]
